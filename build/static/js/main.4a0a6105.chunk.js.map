{"version":3,"sources":["Nav.js","axios.js","Request.js","Banner.js","Row.js","HomeScreen.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","transNavbar","window","scrollY","useEffect","addEventListener","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchTopRated","fetchNetflixOriginals","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","fetchActionMovies","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundPosition","backgroundImage","backdrop_path","backgroundSize","title","name","original_name","overview","substr","Row","fetchURl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","App","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a0a6105.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false)\r\n  function transNavbar() {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true)\r\n    } else {\r\n      handleShow(false)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', transNavbar)\r\n    return () => window.removeEventListener('scroll', transNavbar)\r\n  }, [])\r\n  return (\r\n    <div className={`nav ${show && 'nav_black'}`}>\r\n      <div className='nav_contents'>\r\n        <img\r\n          className='nav_logo'\r\n          src='http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png'\r\n          alt='nav_logo'\r\n        />\r\n        <img\r\n          className='nav_avatar'\r\n          src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png'\r\n          alt='nav_avatar'\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3',\r\n})\r\n\r\nexport default instance\r\n","const API_KEY = '680af9ae9d77a608ed6c674c83d73c78'\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n}\r\n\r\nexport default requests\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Banner.css'\r\nimport axios from './axios'\r\nimport requests from './Request.js'\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([])\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals)\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      )\r\n      return request\r\n    }\r\n    fetchData()\r\n  }, [])\r\n  function truncate(string, n) {\r\n    return string?.length > n ? string.substr(0, n - 1) + '....' : string\r\n  }\r\n  return (\r\n    <header\r\n      className='banner'\r\n      style={{\r\n        backgroundPosition: 'center center',\r\n        backgroundImage: `url(\r\n          'http://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\r\n        backgroundSize: 'cover',\r\n      }}\r\n    >\r\n      <div className='banner_contents'>\r\n        <h1 className='banner_title'>\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className='banner_buttons'>\r\n          <button className='banner_button'>Play</button>\r\n          <button className='banner_button'>My List</button>\r\n        </div>\r\n        <h1 className='banner_desp'>{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n      <div className='banner--fadeBottom'></div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Banner\r\n","import axios from './axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport './row.css'\r\n\r\nfunction Row({ title, fetchURl, isLargeRow = false }) {\r\n  const [movies, setMovies] = useState([])\r\n  const base_url = 'http://image.tmdb.org/t/p/original/'\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchURl)\r\n      setMovies(request.data.results)\r\n      return request\r\n    }\r\n    fetchData()\r\n  }, [fetchURl])\r\n  return (\r\n    <div className='row'>\r\n      <h2>{title}</h2>\r\n      <div className='row_posters'>\r\n        {movies.map(\r\n          (movie) =>\r\n            ((isLargeRow && movie.poster_path) ||\r\n              (!isLargeRow && movie.backdrop_path)) && (\r\n              <img\r\n                className={`row_poster ${isLargeRow && 'row_largeposter'}`}\r\n                key={movie.id}\r\n                src={`${base_url}${\r\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                }`}\r\n                alt='{movie.name}'\r\n              />\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport './HomeScreen.css'\r\nimport Nav from './Nav'\r\nimport Banner from './Banner'\r\nimport requests from './Request'\r\nimport Row from './Row'\r\n\r\nfunction HomeScreen() {\r\n  return (\r\n    <div className='homeScreen'>\r\n      {/* Navbar */}\r\n      <Nav />\r\n      {/* Banner */}\r\n      <Banner />\r\n      {/*Row*/}\r\n      <Row\r\n        className='first_row'\r\n        title='NETFLIX ORIGINALS'\r\n        fetchURl={requests.fetchNetflixOriginals}\r\n        isLargeRow\r\n      />\r\n      <Row title='Trending Now' fetchURl={requests.fetchTrending} />\r\n      <Row title='Top Rated' fetchURl={requests.fetchTopRated} />\r\n      <Row title='Comedy Movies' fetchURl={requests.fetchComedyMovies} />\r\n      <Row title='Romance movies' fetchURl={requests.fetchRomanceMovies} />\r\n      <Row title='Action Movies' fetchURl={requests.fetchActionMovies} />\r\n      <Row title='Horror Movies' fetchURl={requests.fetchHorrorMovies} />\r\n      <Row title='Documentaries' fetchURl={requests.fetchDocumentaries} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomeScreen\r\n","import React from 'react'\r\nimport './App.css'\r\nimport HomeScreen from './HomeScreen'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='app'>\r\n      <HomeScreen />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}